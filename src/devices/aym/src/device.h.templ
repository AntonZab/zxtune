/*
Abstract:
  AY/YM chips device class

Last changed:
  $Id: device.h 2209 2013-02-11 06:29:27Z vitamin.caig $

Author:
  (C) Vitamin/CAIG/2001

  Based on sources of UnrealSpeccy by SMT and Xpeccy sources by SamStyle
*/

#pragma once
#ifndef DEVICES_AYM_DEVICE_H_DEFINED
#define DEVICES_AYM_DEVICE_H_DEFINED

//local includes
#include "generators.h"
//library includes
#include <devices/aym/chip.h>

namespace Devices
{
  namespace AYM
  {
    class AYMDevice
    {
    public:
      AYMDevice()
        : LevelA(), LevelB(), LevelC()
        , VolumeTable(&GetAY38910VolTable())
        , State()
        , GetLevelsFunc(&AYMDevice::GetLevels000)
      {
      }

      void SetVolumeTable(const VolTable& table)
      {
        VolumeTable = &table;
      }

      void SetDutyCycle(uint_t value, uint_t mask)
      {
        GenA.SetDutyCycle(0 != (mask & DataChunk::CHANNEL_MASK_A) ? value : NO_DUTYCYCLE);
        GenB.SetDutyCycle(0 != (mask & DataChunk::CHANNEL_MASK_B) ? value : NO_DUTYCYCLE);
        GenC.SetDutyCycle(0 != (mask & DataChunk::CHANNEL_MASK_C) ? value : NO_DUTYCYCLE);
        GenN.SetDutyCycle(0 != (mask & DataChunk::CHANNEL_MASK_N) ? value : NO_DUTYCYCLE);
        GenE.SetDutyCycle(0 != (mask & DataChunk::CHANNEL_MASK_E) ? value : NO_DUTYCYCLE);
      }

      void SetMixer(uint_t mixer)
      {
        const uint_t mixMask = DataChunk::REG_MASK_TONEA | DataChunk::REG_MASK_TONEB | DataChunk::REG_MASK_TONEC | 
          DataChunk::REG_MASK_NOISEA | DataChunk::REG_MASK_NOISEB | DataChunk::REG_MASK_NOISEC;
        State = (State & ~mixMask) | (~mixer & mixMask);
        ApplyState();
      }

      void SetPeriods(uint_t toneA, uint_t toneB, uint_t toneC, uint_t toneN, uint_t toneE)
      {
        GenA.SetPeriod(toneA);
        GenB.SetPeriod(toneB);
        GenC.SetPeriod(toneC);
        GenN.SetPeriod(toneN);
        GenE.SetPeriod(toneE);
      }

      void SetEnvType(uint_t type)
      {
        GenE.SetType(type);
      }

      void SetLevel(uint_t levelA, uint_t levelB, uint_t levelC)
      {
        LevelA = (((levelA & DataChunk::REG_MASK_VOL) << 1) + 1);
        LevelB = (((levelB & DataChunk::REG_MASK_VOL) << 1) + 1);
        LevelC = (((levelC & DataChunk::REG_MASK_VOL) << 1) + 1);
        const uint_t envMask = 64 | 128 | 256;
        const uint_t envFlags = 
          (0 != (levelA & DataChunk::REG_MASK_ENV) ? 64 : 0) |
          (0 != (levelB & DataChunk::REG_MASK_ENV) ? 128 : 0) |
          (0 != (levelC & DataChunk::REG_MASK_ENV) ? 256 : 0)
        ;
        State = (State & ~envMask) | envFlags;
        ApplyState();
      }

      void Reset()
      {
        GenA.Reset();
        GenB.Reset();
        GenC.Reset();
        GenN.Reset();
        GenE.Reset();
        LevelA = LevelB = LevelC = 0;
        VolumeTable = &GetAY38910VolTable();
        State = 0;
        GetLevelsFunc = &AYMDevice::GetLevels000;
      }

      void Tick(uint_t ticks)
      {
        GenA.Tick(ticks);
        GenB.Tick(ticks);
        GenC.Tick(ticks);
        GenN.Tick(ticks);
        GenE.Tick(ticks);
      }

      void GetLevels(MultiSample& result) const
      {
        (this->*GetLevelsFunc)(result);
      }
    private:
      void ApplyState()
      {
        static const GetLevelsFuncType FUNCTIONS[] =
        {
          <TMPL_LOOP NAME=FUNCTIONS>&AYMDevice::<TMPL_VAR NAME=NAME>,
          </TMPL_LOOP>
        };
        GetLevelsFunc = FUNCTIONS[State];
      }

      <TMPL_LOOP NAME=FUNCTIONS>
      void <TMPL_VAR NAME=NAME>(MultiSample& result) const
      {
        <TMPL_VAR NAME=NOISE>
        <TMPL_VAR NAME=ENVELOPE>
        const uint_t outA = <TMPL_VAR NAME=OUTA>;
        const uint_t outB = <TMPL_VAR NAME=OUTB>;
        const uint_t outC = <TMPL_VAR NAME=OUTC>;
        const VolTable& table = *VolumeTable;
        result[0] = table[outA];
        result[1] = table[outB];
        result[2] = table[outC];
      }
      </TMPL_LOOP>
    private:
      ToneGenerator GenA;
      ToneGenerator GenB;
      ToneGenerator GenC;
      NoiseGenerator GenN;
      EnvelopeGenerator GenE;
      uint_t LevelA;
      uint_t LevelB;
      uint_t LevelC;
      const VolTable* VolumeTable;
      uint_t State;
      typedef void (AYMDevice::*GetLevelsFuncType)(MultiSample& result) const;
      GetLevelsFuncType GetLevelsFunc;
    };
  }
}

#endif //DEVICES_AYM_DEVICE_H_DEFINED
